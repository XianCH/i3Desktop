file:///home/x14n/code/goproj/github.com/x14n/goStu/databasestu/queue/queue.go {"mtime":1694820430577,"ctime":1694817772663,"size":617,"etag":"3b786ikc0js","orphaned":false,"typeId":""}
package main

import (
	"fmt"
)

type Queue struct {
	items []interface{}
}

func (q *Queue) Enqueue(item interface{}) {
	q.items = append(q.items, item)
}

func (q *Queue) Dequeue() interface{} {
	if q.IsEmpty() {
		return nil
	}
	item := q.items[0]
	q.items = q.items[1:]
	return item
}

func (q *Queue) Front() interface{} {
	if q.IsEmpty() {
		return nil
	}
	return q.items[0]
}

func (q *Queue) IsEmpty() bool {
	return len(q.items) == 0
}

func main() {
	queue := Queue{}

	queue.Enqueue(1)
	queue.Enqueue(2)
	queue.Enqueue(3)

	fmt.Println("Queue:")
	for !queue.IsEmpty() {
		fmt.Println(queue.Dequeue())
	}
}
